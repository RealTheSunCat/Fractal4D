#version 430
//! layout(local_size_x = 16, local_size_y = 16) in; // this is inserted on load
layout(rgba32f, binding = 0) writeonly uniform image2D img_output;
layout(r8ui, binding = 1) readonly uniform uimage3D blockData;

//! #define RENDER_DIST 100

struct Camera
{
    vec3 pos;
    float cosYaw;
    float cosPitch;
    float sinYaw;
    float sinPitch;
    vec2 frustumDiv;
};
uniform Camera camera;
uniform vec2 screenSize;

#define sphereOrigin vec3(0, 0, 0)
#define sphereRad 15

// return no more than distance to object
float distEst(vec3 pos)
{
    vec3 distVec = sphereOrigin - pos;

    return length(distVec) - sphereRad;
}

bool rayMarch(in vec3 pos, in vec3 dir, out float travelDist)
{
    bool hit = false;

    while(!hit) { // march!
        
        float dist = distEst(pos);

        if(travelDist > RENDER_DIST)
            return false;

        if(dist < 0.001)
            return true;

        pos += dir * dist;
        travelDist += dist;
    }

    return hit;
}

vec3 getPixel(in vec2 pixel_coords)
{
    const vec2 frustumRay = (pixel_coords - (0.5 * screenSize)) / camera.frustumDiv;

    // rotate frustum space to world space
    const float temp = camera.cosPitch + frustumRay.y * camera.sinPitch;
    
    vec3 rayDir = normalize(vec3(frustumRay.x * camera.cosYaw + temp * camera.sinYaw,
                                 frustumRay.y * camera.cosPitch - camera.sinPitch,
                                 temp * camera.cosYaw - frustumRay.x * camera.sinYaw));

    // raymarch outputs
    float theDistance = 0.0;
    bool hit = rayMarch(camera.pos, rayDir, theDistance);

    return vec3(theDistance / RENDER_DIST);
}

void main() {
    // get index in global work group i.e x,y position
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    
    vec4 pixel = vec4(getPixel(pixel_coords), 1);

    // output to image
    imageStore(img_output, pixel_coords, pixel);
}